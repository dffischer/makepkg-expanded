#!/bin/bash

# initialize gettext
export TEXTDOMAIN='pacman-scripts'

# parse arguments
while [ "$1" ]; do
  case "$1" in
    -h)
      echo "usage: $0 [-h | -p PKGBUILD ...]"
      echo 'builds the given packages, or all found below the current directory, expanding' \
        'makepkg-templates but leaving the original intact apart from the version numbers.'
      echo 'Templates are taken from a makepkg-templates directory found besides this script.'
      exit ;;
    -p)
      if [[ "$2" == -* || -z "$2" ]]
      then
        echo "makepkg-expanded: $(gettext "option requires an argument") -- -p" >&2
        exit 1
      else
        packages+=("$2")
      fi
      shift ;;
    *) pass+=("$1") ;;
  esac
  shift
done

templates=(
  --template-dir
  "$(grep -Po "(?<=^\ttemplate_dir => \[').*(?='\],$)" $(which makepkg-template))"
  --template-dir
  "$(realpath ${BASH_SOURCE[@]%/*})/makepkg-templates"
)

# process PKGBUILDs
for path in ${packages[@]:-$(find ! -readable -prune -o -iname PKGBUILD -print)}
do
  if [ ! -f "$path" ]
  then
    printf "$0: $(gettext "%s file (%s) does not exist or is not a regular file.")\n" "build script" "$path"
  else
    # Plain suffix removal does not suffice as $path may be just a filename.
    dir="$(dirname "$path")"
    file="${path##*/}"
    ( cd "$dir"

      # expand and clean
      makepkg-template -p "$file" -o PKGBUILD.expanded "${templates[@]}" || exit $?
      sed -i '/# \(template\|vim\)/d' PKGBUILD.expanded

      # build
      makepkg -p PKGBUILD.expanded "${pass[@]}" || exit $?
      makepkg -Sp PKGBUILD.expanded "${pass[@]}" || exit $?

      # propagate changed pkgver
      oldpkgver=$(grep -Po '(?<=^pkgver=)[^ ]*' "$file")
      newpkgver=$(grep -Po '(?<=^pkgver=)[^ ]*' PKGBUILD.expanded)
      if [ $newpkgver != $oldpkgver ]
      then
        if [ -w "$file" ]
        then
          sed --follow-symlinks -i "s:^pkgver=[^ ]*:pkgver=$newpkgver:;s:^pkgrel=[^ ]*:pkgrel=1:" "$file"
        else
          printf "$0: $(gettext "%s is not writeable -- pkgver will not be updated")\n" "$file"
        fi
      fi
    ) || exit $?
  fi
done
