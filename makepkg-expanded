#!/bin/bash

# initialize gettext
export TEXTDOMAIN='pacman-scripts'

# parse arguments
invalid_option() {
  echo "$0: $(gettext "invalid option") -- '$OPTARG'" >&2
  exit 1
}

add_all() {
  while read -r -d $'\0'; do
    packages+=("$REPLY")
  done < <(find ! -readable -prune -o -iname ${1:-PKGBUILD} -print0)
}

while getopts ':hp:a:t:e:mdr:' argument
do
  case $argument in
    h)
      echo "usage: $0 [options]"
      echo 'builds the PKGBUILD found in the current directory, expanding makepkg-templates' \
        'but leaving the original intact apart from the version numbers.'
      echo 'Valid options are:'
      echo ' -h              show this help text'
      echo ' -p <script>     select an alternative file instead of PKGBUILD'
      echo ' -a [pattern]    select all files matching the given pattern, or all PKGBUILDs'
      echo ' -t <dir>        directory to look up templates in'
      echo ' -e <extension>  extension for intermediate expanded build scripts'
      echo ' -m              keep template markers intact'
      echo ' -d              keep duplicate templates'
      echo ' -r <command>    command to execute for each PKGBUILD'
      exit ;;
    p) packages+=("$OPTARG") ;;
    a) add_all "$OPTARG" ;;
    t) templates+=(--template-dir "$(realpath "$OPTARG")") ;;
    e) extension="$OPTARG" ;;
    m)
      if declare -f | grep -q sed
      then
        clean-template() {
          cat
        }
      else
        clean-template() {
          command clean-template -m
        }
      fi ;;
    d)
      if declare -f | grep -q command
      then
        clean-template() {
          cat
        }
      else
        clean-template() {
          sed '/# vim/d;x;$G;/# template/d;1d'
        }
      fi ;;
    r) process+=("$OPTARG") ;;
    \?) invalid_option ;;
    :)
      case "$OPTARG" in
        a) add_all ;;
        -) invalid_option ;;  # No long options.
        *) echo "$0: $(gettext "option requires an argument") -- '-$OPTARG'" >&2
          exit 1 ;;
      esac
  esac
done

if [ "${#templates[@]}" -le 0 ]
then
  templates=("$(grep -Po "(?<=^\ttemplate_dir => \[').*(?='\],$)" $(which makepkg-template))")
  gitdir="$(git rev-parse --show-toplevel)/makepkg-templates"
  if [ $? -eq 0 -a -d "$gitdir" ]
  then
    templates+=("$gitdir")
  fi
fi

if [ ${#process[@]} -eq 0 ]
then
  process=(
    'exec makepkg -p "$1"'
    'exec cp-pkgver "$1" "$2"'
  )
fi


# process PKGBUILDs
tmpenv="$(mktemp --tmpdir expanded-env.XXXXXXXXXX)"
trap "rm '$tmpenv'" EXIT
for path in "${packages[@]:-PKGBUILD}"
do
  if [ ! -f "$path" ]
  then
    printf "$0: $(gettext "%s file (%s) does not exist or is not a regular file.")\n" "build script" "$path"
  else
    # Plain suffix removal does not suffice as $path may be just a filename.
    dir="$(dirname "$path")"
    file="${path##*/}"
    expanded="$file${extension:=.expanded}"
    ( cd "$dir" #(

      # expand and clean
      makepkg-template -p "$file" -o - "${templates[@]/#/--template-dir=}" | \
        clean-template > "$expanded"
      [ ${PIPESTATUS[0]} -ne 0 ] && exit ${PIPESTATUS[0]}

      # process
      echo "GLOBIGNORE='.*:$expanded:$file'" > "$tmpenv"
      for run in "${process[@]}"
      do
        BASH_ENV="$tmpenv" bash -c "$run" process-expanded \
          "$expanded" "$file" "${templates[@]}" || exit $?
      done
    ) || exit $? #)
  fi
done
