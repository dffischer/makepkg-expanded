#!/bin/bash

# Decides whether a full path is a template or build script, and processes it.
categorize() {
  if [[ $1 =~ .*/([^/]+)-[[:digit:]]+\.template ]]
  then
    extract_templates "$1" "${BASH_REMATCH[1]}" 'style=solid'
  else
    extract_templates "$1" \
      "$(makepkg-expanded -p "$1" \
        -r 'makepkg --printsrcinfo -p "$1"' \
      | grep -Po '(?<=pkgbase = ).*')" \
      'style=bold'
  fi
}

extract_templates() {
  echo "  \"$2\"${3:+ [$3]};"
  grep -Po '(?<=template (input|start); name=).*(?=;|$)' $1 \
    | sed "s/.*/  \"$2\" -> \"\0\";/"
}


process_defaults() {
  while read -rd $''
  do
    categorize $REPLY
  done < <( find -regextype posix-egrep \
    \( -name 'PKGBUILD' -o -regex '.*-[[:digit:]]+\.template' \) \
    -print0 )
}

suppress_defaults() {
  process_defaults() {
    :
  }
}

# Proxy method to categorize, preventing the
# processing of defaults on first execution.
process() {
  suppress_defaults
  process() {
    categorize "$@"
  }
  categorize "$@"
}


echo 'digraph templates {'
echo "  node [style=dashed];"
while [ $OPTIND -le $# ]
do
  if getopts 'hl:z:' argument
  then
    case $argument in
      h) {
        suppress_defaults
        echo "usage: $0 [options | files ...]"
        echo 'display template inclusion relation in graphiz dot format'
        echo ' -h         only shows this help text'
        echo ' -l <file>  read file list from file'
        echo ' -z <file>  read zero delimited file list'
      } >&2 ;;
      l)
        while read -r
        do
          process $REPLY
        done < <(cat "$OPTARG") ;;
      \?) exit 1 ;;
    esac
  else
    process "${!OPTIND}"
    let OPTIND++
  fi
done
process_defaults
echo '}'
