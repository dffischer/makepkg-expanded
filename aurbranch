#!/bin/bash

# Compose option string.
opts="$(
  offbranch -h | while read
  do
    if [[ "$REPLY" =~ ^' -'([^b])( <.*>)?.* ]]
    then
      echo -n ${BASH_REMATCH[1]}${BASH_REMATCH[2]:+:}
    fi
  done
)"

# Parse arguments.
while getopts "p:$opts" argument
do
  case $argument in
    h)
      echo "usage: $0 [options] <additional files>"
      echo 'Commit changes in the PKGBUILD to an AUR distribution branch.'
      echo ' -p <script>  file to use in place of PKGBUILD'
      echo 'Also supports all options offbranch accepts, apart from -b.'
      exit ;;
    p) pkgbuild="$OPTARG" ;;
    s) separator="$OPTARG" ;;&
    \?) exit 1 ;;
    *) pass+=("-$argument" ${OPTARG:+"$OPTARG"}) ;;
  esac
done
shift $(($OPTIND - 1))

# Generate missing .SRCINFO.
if [[ " $* " =~ \ (.*)"${separator:=:}.SRCINFO " ]]
then
  srcinfo="${BASH_REMATCH[1]}"
else
  mksrcinfo ${pkgbuild:+"$pkgbuild"}
  pass+=(.SRCINFO)
fi

# Determine branch name.
readonly pkgbase="$(grep -Po "(?<=pkgbase = ).*" "${srcinfo:-.SRCINFO}")"
branch=aur
if [ -n "$(git rev-parse --show-prefix 2> /dev/null)" ]
then
  branch+="/$pkgbase"
fi

# Resolve symbolic links.
for argument
do
  filename="${argument%${separator}*}"
  if [ -h "$filename" ]
  then
    pass+=("$(readlink "$filename")$separator${argument##*$separator}")
  else
    pass+=("$argument")
  fi
done

# Update the branch.
offbranch \
  -b "$branch" "${pass[@]}" \
  "${pkgbuild:-PKGBUILD}${separator}PKGBUILD"

# Create branch, if needed, and propagate errors.
case $? in
  2) offremote -fn "$branch" \
    "ssh://aur@aur.archlinux.org/${pkgbase}.git" ;;
  [0-7]) ;;
  *) exit $? ;;
esac
