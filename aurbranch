#!/bin/bash

# Parse arguments.
while getopts 'hp:s:' argument
do
  case $argument in
    h)
      echo "usage: $0 [options] <additional files>"
      echo 'Commit changes in the PKGBUILD to an AUR distribution branch.'
      echo ' -h              show this help text'
      echo ' -p <script>     file to use in place of PKGBUILD'
      echo ' -s <separator>  separator between real file name and path in repository'
      exit ;;
    p) pkgbuild="$OPTARG" ;;
    s) separator="$OPTARG" ;;
    \?) exit 1 ;;
  esac
done
shift $(($OPTIND - 1))

# Generate missing .SRCINFO.
if ! [[ " ${@##*${separator:=:}} " =~ " .SRCINFO " ]]
then
  mksrcinfo ${pkgbuild:+"$pkgbuild"}
fi

# Determine branch name.
readonly pkgbase="$(grep -Po "(?<=pkgbase = ).*" .SRCINFO)"
branch=aur
if [ -n "$(git rev-parse --show-prefix 2> /dev/null)" ]
then
  branch+="/$pkgbase"
fi

# Resolve symbolic links.
for argument
do
  filename="${argument%${separator}*}"
  if [ -h "$filename" ]
  then
    pass+=("$(readlink "$filename")$separator${argument##*$separator}")
  else
    pass+=("$argument")
  fi
done

# Update the branch.
offbranch \
  -qb "$branch" \
  ${separator+-s} ${separator+"$separator"} \
  "${pkgbuild:-PKGBUILD}${separator:-:}PKGBUILD" .SRCINFO "${pass[@]}"

case $? in
  2) # Branch created, configure it.
    readonly master='refs/heads/master'
    git config "remote.${pkgbase}.url" "ssh://aur@aur4.archlinux.org/${pkgbase}.git"
    git config "remote.${pkgbase}.fetch" "$master:refs/remotes/$branch"
    git config "remote.${pkgbase}.push" "refs/heads/$branch:$master"
    git config "branch.${branch}.remote" "$pkgbase"
    git config "branch.${branch}.merge" "$master"
    ;;
  [0-7]) # Success, no action necessary.
    ;;
  *) # Propagate errors.
    exit 1 ;;
esac
