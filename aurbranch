#!/bin/bash

# Compose option string.
opts="$(
  offbranch -h | while read
  do
    if [[ "$REPLY" =~ ^' -'([^b])( <.*>)?.* ]]
    then
      echo -n ${BASH_REMATCH[1]}${BASH_REMATCH[2]:+:}
    fi
  done
)"

# Provide temporary directory.
# File list for -z and -i arguments are rewritten there.
readonly tmpdir="$(mktemp -d --tmpdir aurbranch.XXXXXXXXXX)"
trap "rm -r '$tmpdir'" EXIT

# Resolve symbolic links.
resolve() {
  local readonly addpath="${1##*${separator:=:}}"
  local readonly filename="${1%$separator*}"
  if [ -h "$filename" ]
  then
    printf '%s%s%s\0' "$(readlink "$filename")" "$separator" "$addpath"
  else
    printf '%s\0' "$1"
  fi
}

# Resolve a list option argument, given delimiter.
list() {
  local readonly fifo="$(mktemp -up "$tmpdir" pipe.XXXXXXXXXX)"
  mkfifo "$fifo"
  while read -rd "$1"
  do
    resolve "$REPLY"
  done < "$OPTARG" > "$fifo" &
  pass+=("-z" "$fifo")
}

# Parse arguments.
while [ $OPTIND -le $# ]
do
  if getopts "p:i:$opts" argument
  then
    case $argument in
      h)
        echo "usage: $0 [options] <additional files>"
        echo 'Commit changes in the PKGBUILD to an AUR distribution branch.'
        echo ' -p <script>  file to use in place of PKGBUILD'
        echo ' -i <script>  file to use in place of .SRCINFO'
        echo 'Also supports all options offbranch accepts, apart from -b.'
        exit ;;
      p) pkgbuild="$OPTARG" ;;
      i) srcinfo="$OPTARG" ;;
      s) separator="$OPTARG" ;;&
      l) list $'\n' ;;
      z) list $'' ;;
      \?) exit 1 ;;
      *) pass+=("-$argument" ${OPTARG:+"$OPTARG"}) ;;
    esac
  else
    pass+=("$(resolve "${!OPTIND}")")
    let OPTIND++
  fi
done


# Generate missing .SRCINFO.
if [ -z "$srcinfo" ]
then
  if [ -n "$pkgbuild" ]
  then
    # "cd ... cd $OLDPWD", acts like "pushd ... popd", but only
    # modifies $OLDPWD when the directory was actually changed.
    cd "$(dirname "$pkgbuild")"
    makepkg --printsrcinfo -p "${pkgbuild##*/}" > .SRCINFO
    if [ -n "${OLDPWD}" ]
    then
      srcinfo="$PWD/.SRCINFO"
      cd "$OLDPWD"
    fi
  else
    makepkg --printsrcinfo > .SRCINFO
  fi
fi

# Determine branch name.
readonly pkgbase="$(grep -Po "(?<=pkgbase = ).*" "${srcinfo:-.SRCINFO}")"
branch=aur
if [ -n "$(git rev-parse --show-prefix 2> /dev/null)" ]
then
  branch+="/$pkgbase"
fi

# Refrain from updating .SRCINFO only changed in terms of time stamp.
readonly lastsrcinfo="$tmpdir/SRCINFO"
if git cat-file blob "$branch:.SRCINFO" > "$lastsrcinfo" 2> /dev/null
then
  omit-date() {
    sed '2{/^#.*:.*:/d}' $1
  }
  if cmp -s <(omit-date "$lastsrcinfo") <(omit-date "${srcinfo:-.SRCINFO}")
  then
    srcinfo="$lastsrcinfo"
  fi
fi


# Update the branch.
offbranch -b "$branch" \
  "${pkgbuild:+$pkgbuild:}PKGBUILD" \
  "${srcinfo:+$srcinfo:}.SRCINFO" \
  "${pass[@]}"

# Create branch, if needed, and propagate errors.
case $? in
  2) offremote -fn "$branch" \
    "ssh://aur@aur.archlinux.org/${pkgbase}.git" ;;
  [0-7]) ;;
  *) exit $? ;;
esac
