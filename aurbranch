#!/bin/bash

# Parse arguments.
while getopts 'hp:s:' argument
do
  case $argument in
    h)
      echo "usage: $0 [options] <additional files>"
      echo 'Commit changes in the PKGBUILD to an AUR distribution branch.'
      echo ' -h              show this help text'
      echo ' -p <script>     file to use in place of PKGBUILD'
      echo ' -s <separator>  separator between real file name and path in repository'
      exit ;;
    p) pkgbuild="$OPTARG" ;;
    s) separator="$OPTARG" ;;
    \?) exit 1 ;;
  esac
done
shift $(($OPTIND - 1))

# Generate missing .SRCINFO.
if ! [[ " ${@##*${separator:=:}} " =~ " .SRCINFO " ]]
then
  mksrcinfo ${pkgbuild:+"$pkgbuild"}
  pass=(.SRCINFO)
fi

# Determine branch name.
readonly pkgbase="$(grep -Po "(?<=pkgbase = ).*" .SRCINFO)"
branch=aur
if [ -n "$(git rev-parse --show-prefix 2> /dev/null)" ]
then
  branch+="/$pkgbase"
fi

# Resolve symbolic links.
for argument
do
  filename="${argument%${separator}*}"
  if [ -h "$filename" ]
  then
    pass+=("$(readlink "$filename")$separator${argument##*$separator}")
  else
    pass+=("$argument")
  fi
done

# Update the branch.
offbranch \
  -b "$branch" \
  ${separator+-s} ${separator+"$separator"} \
  "${pkgbuild:-PKGBUILD}${separator:-:}PKGBUILD" "${pass[@]}"

# Create branch, if needed, and propagate errors.
case $? in
  2) aurremote "$pkgbase" "$branch" ;;
  [0-7]) ;;
  *) exit 1 ;;
esac
